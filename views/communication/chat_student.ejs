<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Incident Chat</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <style>
        /* Existing Styles */
        body { font-family: 'Poppins', sans-serif; margin: 0; background-color: #eef2f7; height: 100vh; display: flex; justify-content: center; align-items: center; }
        .chat-container { background: #fff; border-radius: 10px; box-shadow: 0 10px 20px rgba(0, 0, 0, 0.1); width: 500px; height: 500px; display: flex; flex-direction: column; overflow: hidden; }
        .chat-header { background-color: #007bff; color: white; padding: 15px; display: flex; align-items: center; justify-content: space-between; }
        .messages { flex: 1; padding: 15px; overflow-y: auto; border-bottom: 1px solid #eee; display: flex; flex-direction: column; }
        .message { margin-bottom: 10px; padding: 10px 15px; border-radius: 20px; max-width: 75%; position: relative; }
        .message.incoming { background-color: #f1f1f1; align-self: flex-start; }
        .message.outgoing { background-color: #dcf8c6; align-self: flex-end; }
        .message strong { display: block; font-weight: 600; margin-bottom: 5px; }
        .message small { font-size: 10px; color: #888; text-align: right; display: block; }
        .date-separator { font-size: 12px; color: #888; text-align: center; margin: 10px 0; }

        .input-container { display: flex; padding: 10px; background-color: #f9f9f9; border-top: 1px solid #eee; align-items: center; }
        .input-container input { flex: 1; border-radius: 20px; border: 1px solid #ccc; padding: 10px; margin-right: 10px; outline: none; }
        .input-container input:focus { border-color: #007bff; }
        .input-container button { padding: 10px 20px; background-color: #007bff; color: #fff; border: none; border-radius: 20px; cursor: pointer; display: flex; align-items: center; justify-content: center; }
    </style>
</head>

<body>
    <div class="chat-container">
        <div class="chat-header">
            <div class="staff-info">
                <img src="https://via.placeholder.com/40" alt="Staff Profile">
                <div>
                    <div class="name"><%= staff ? staff.name : 'No Staff' %></div>
                    <div class="status">Online</div>
                </div>
            </div>
        </div>

        <div class="messages" id="messages">
            <% messages.forEach(msg => { %>
                <div class="message <%= msg.message_type %>">
                    <strong><%= msg.sender_name %>:</strong> <%= msg.content %> <br>
                    <small>
                        <%= new Date(msg.timestamp).toLocaleTimeString('en-US', { hour: 'numeric', minute: 'numeric', hour12: true }) %>
                    </small>
                </div>
            <% }); %>
        </div>
        

        <div class="input-container">
            <input id="messageInput" type="text" placeholder="Type a message">
            <button id="sendButton">Send</button>
        </div>

        <script src="/socket.io/socket.io.js"></script>
        <script>
            const socket = io();
            const studentInfo = <%- JSON.stringify(user) %>; 
            const staffInfo = <%- JSON.stringify(staff) %>; 

            socket.emit('register', { user_id: studentInfo.id, name: studentInfo.name, role: 'student' });

            function formatTime(timestamp) {
                const options = { hour: 'numeric', minute: 'numeric', hour12: true };
                return new Intl.DateTimeFormat('en-US', options).format(timestamp);
            }

            function sendMessage() {
                const messageContent = document.getElementById('messageInput').value.trim();
                if (messageContent) {
                    socket.emit('chat message', { message: messageContent, sender: studentInfo, receiver: staffInfo });

                    const messageElement = document.createElement('div');
                    messageElement.classList.add('message', 'outgoing');
                    const timestamp = new Date();
                    messageElement.innerHTML = `<strong>You:</strong> ${messageContent} <br><small>${formatTime(timestamp)}</small>`;
                    document.getElementById('messages').appendChild(messageElement);
                    document.getElementById('messageInput').value = '';
                    
                    const messagesDiv = document.getElementById('messages');
                    messagesDiv.scrollTop = messagesDiv.scrollHeight;
                }
            }

            document.getElementById('sendButton').onclick = sendMessage;

            socket.on('chat message', (data) => {
                const { user, message, timestamp } = data;
                const messageElement = document.createElement('div');
                messageElement.classList.add('message', 'incoming');
                messageElement.innerHTML = `<strong>${user.name}:</strong> ${message} <br><small>${formatTime(new Date(timestamp))}</small>`;
                document.getElementById('messages').appendChild(messageElement);

                const messagesDiv = document.getElementById('messages');
                messagesDiv.scrollTop = messagesDiv.scrollHeight;
            });
        </script>
    </div>
</body>
</html>

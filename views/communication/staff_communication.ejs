<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Student Messages</title>
    <!-- Bootstrap CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
    
    <style>
        body {
            background-color: #f8f9fa;
            font-family: 'poppins', 'Arial', sans-serif;
        }

        .staff-container {
            max-width: 600px;
            margin: 50px auto;
            padding: 20px;
            background-color: #fff;
            border-radius: 10px;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        }

        h2 {
            
            margin-bottom: 20px;
            font-weight: 600;
            color: #343a40;
        }

        ul {
            list-style: none;
            padding: 0;
        }

        li {
            margin-bottom: 15px;
        }

        a {
            text-decoration: none;
            color: #007bff;
            font-weight: 500;
        }

        a:hover {
            color: #0056b3;
        }

        .no-messages {
            text-align: center;
            font-style: italic;
            color: #6c757d;
        }

        .unread-badge {
            background-color: #dc3545;
            color: #fff;
            border-radius: 12px;
            padding: 2px 10px;
            font-size: 12px;
            margin-left: 10px;
        }

        .new-message-alert {
            position: fixed;
            bottom: 20px;
            right: 20px;
            background-color: #28a745;
            color: #fff;
            padding: 10px 20px;
            border-radius: 30px;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.15);
            display: none;
            z-index: 1000;
        }
        .back-button-container {
            text-align: left;
            margin-bottom: 30px;
        }
        .back-button {
            font-size: 16px;
            color: #6c757d;
        }
        .back-button i {
            margin-right: 5px;
        }
    </style>
</head>

<body>

    <div class="staff-container">
        <div class="back-button-container">

            <a href="/dashboards/staff_dashboard" class="back-button">
              <i class="fas fa-arrow-left"></i> Back to Staff Dashboard
            </a>
          </div>
        <h2>Student Messages</h2>
        <ul class="list-group">
            <% if (studentsWithUnreadMessages && studentsWithUnreadMessages.length > 0) { %>
                <% studentsWithUnreadMessages.forEach(student => { %>
                    <li class="list-group-item d-flex justify-content-between align-items-center">
                        <a href="/communication/chat_staff/<%= student.student_id %>">
                            <%= student.name %>
                        </a>
                        <span class="unread-badge"><%= student.unread_count %> unread</span>
                    </li>
                <% }) %>
            <% } else { %>
                <li class="no-messages">No students with unread messages.</li>
            <% } %>
        </ul>
    </div>

    <!-- New Message Alert -->
    <div class="new-message-alert" id="newMessageAlert">
        New message received!
    </div>

    <!-- Socket.IO Script -->
    <script src="/socket.io/socket.io.js"></script>
    <script>
        const socket = io();
        const newMessageAlert = document.getElementById('newMessageAlert');
        const unreadMessagesList = document.getElementById('unreadMessagesList');

        // Register the staff on the socket
        const staffInfo = <%- JSON.stringify(user) %>; // Current logged-in staff
        console.log({staffInfo:staffInfo});
        socket.emit('register', { user_id: staffInfo.id, name: staffInfo.name, role: 'staff' });

        // Fetch unread messages for the staff member
        async function fetchUnreadMessages() {
            try {
                const response = await fetch(`/unread/${staffInfo.id}`);
                console.log(response);
                if (response.ok) {
                    const messages = await response.json();
                    console.log(messages);
                    displayUnreadMessages(messages);
                } else {
                    console.error('Failed to fetch unread messages');
                }
            } catch (error) {
                console.error('Error fetching unread messages:', error);
            }
        }

        // Display unread messages
        function displayUnreadMessages(messages) {
            unreadMessagesList.innerHTML = ''; // Clear the list
            if (messages.length > 0) {
                messages.forEach(message => {
                    const listItem = document.createElement('li');
                    listItem.classList.add('list-group-item', 'd-flex', 'justify-content-between', 'align-items-center');
                    listItem.innerHTML = `
                        <a href="/communication/chat_staff/${message.sender_id}">
                            ${message.sender_name}
                        </a>
                        <span class="unread-badge">${message.unread_count} unread</span>
                    `;
                    unreadMessagesList.appendChild(listItem);
                });
            } else {
                unreadMessagesList.innerHTML = '<li class="no-messages">No students with unread messages.</li>';
            }
        }

        // Listen for new messages from students
        socket.on('chat message', (data) => {
            const { user, message } = data;
            alert(`New message from ${user.name}: ${message}`);

            // Show new message alert
            newMessageAlert.innerText = `New message from ${user.name}`;
            newMessageAlert.style.display = 'block';

            // Hide the alert after 5 seconds
            setTimeout(() => {
                newMessageAlert.style.display = 'none';
            }, 5000);

            // Fetch and display unread messages
            fetchUnreadMessages();
        });

        // Initial fetch of unread messages
        fetchUnreadMessages();
    </script>


    <!-- Bootstrap JS -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/js/bootstrap.bundle.min.js"></script>
</body>

</html>

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Incident Chat - Staff</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <style>
        body {
            font-family: 'Poppins', sans-serif;
            margin: 0;
            background-color: #eef2f7;
            height: 100vh;
            display: flex;
            justify-content: center;
            align-items: center;
        }
        .staff-container {
            max-width: 600px;
            margin: 50px auto;
            padding: 20px;
            background-color: #fff;
            border-radius: 10px;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        }
        .chat-container {
            background: #fff;
            border-radius: 10px;
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.2);
            width: 500px;
            max-width: 100%;
            height: 500px;
            display: flex;
            flex-direction: column;
            overflow: hidden;
            margin: 20px;
        }
        .chat-header {
            background-color: #007bff;
            color: white;
            padding: 15px;
            display: flex;
            align-items: center;
            justify-content: space-between;
        }
        .messages {
            flex: 1;
            padding: 15px;
            overflow-y: auto;
            border-bottom: 1px solid #eee;
            display: flex;
            flex-direction: column;
        }
        .message {
            margin-bottom: 10px;
            padding: 10px 15px;
            border-radius: 20px;
            max-width: 75%;
            position: relative;
        }
        .message.incoming { background-color: #f1f1f1; align-self: flex-start; }
        .message.outgoing { background-color: #dcf8c6; align-self: flex-end; }
        .message strong { display: block; font-weight: 600; margin-bottom: 5px; }
        .message small { font-size: 10px; color: #888; text-align: right; display: block; }
        .date-separator { font-size: 12px; color: #888; text-align: center; margin: 10px 0; }
        .input-container {
            display: flex;
            padding: 10px;
            background-color: #f9f9f9;
            border-top: 1px solid #eee;
            align-items: center;
        }
        .input-container input {
            flex: 1;
            border-radius: 20px;
            border: 1px solid #ccc;
            padding: 10px;
            margin-right: 10px;
            outline: none;
        }
        .input-container input:focus { border-color: #007bff; }
        .input-container button {
            padding: 10px 20px;
            background-color: #007bff;
            color: #fff;
            border: none;
            border-radius: 20px;
            cursor: pointer;
            display: flex;
            align-items: center;
            justify-content: center;
        }
    </style>
</head>

<body>
    <div class="staff-container">
    <div class="breadcrumb-container">
        <nav aria-label="breadcrumb">
            <ol class="breadcrumb">
                <li class="breadcrumb-item"><a href="/dashboards/staff_dashboard">Staff Dashboard</a></li>
                <li class="breadcrumb-item"><a href="/communication/staff_communication">Communication</a></li>
                <li class="breadcrumb-item active" aria-current="page">Messages</li>
            </ol>
        </nav>
    </div>

    <div class="chat-container">
        <div class="chat-header">
            <div class="student-info">
                
                <div>
                    <div class="name"><%= student ? student.name : 'No student' %></div>
                    
                </div>
            </div>
        </div>

        <div class="messages" id="messages">
            <% messages.forEach((msg, index) => { %>
                <% const currentDate = new Date(msg.timestamp).toDateString(); %>
                <% if (index === 0 || new Date(messages[index - 1].timestamp).toDateString() !== currentDate) { %>
                    <div class="date-separator"><%= currentDate %></div>
                <% } %>
                <div class="message <%= msg.sender_id === user.id ? 'outgoing' : 'incoming' %>">
                    <strong><%= msg.sender_name %>:</strong> <%= msg.content %> <br>
                    <small><%= new Date(msg.timestamp).toLocaleTimeString('en-US', { hour: 'numeric', minute: 'numeric', hour12: true }) %></small>
                </div>
            <% }) %>
        </div>

        <div class="input-container">
            <input id="messageInput" type="text" placeholder="Type a message">
            <button id="sendButton">Send</button>
        </div>
    </div>
        <script src="/socket.io/socket.io.js"></script>
        <script>
            const socket = io();
            const staffInfo = <%- JSON.stringify(user) %>;
            const studentInfo = <%- JSON.stringify(student) %>;

            // Register the staff user with the server
            socket.emit('register', { user_id: staffInfo.id, name: staffInfo.name, role: 'staff' });

            let lastMessageDate = null;

            // Format the timestamp to a readable time format
            function formatTime(timestamp) {
                const options = { hour: 'numeric', minute: 'numeric', hour12: true };
                return new Intl.DateTimeFormat('en-US', options).format(new Date(timestamp));
            }

            // Add a date separator in the chat
            function addDateSeparator(date) {
                const dateElement = document.createElement('div');
                dateElement.classList.add('date-separator');
                dateElement.textContent = date;
                document.getElementById('messages').appendChild(dateElement);
            }

            // Send a message to the server and update the chat UI
            function sendMessage() {
                const timestamp = new Date();
                const messageContent = document.getElementById('messageInput').value.trim();
                if (messageContent) {
                    socket.emit('chat message', { message: messageContent, sender: staffInfo, receiver: studentInfo });
                    
                    if (lastMessageDate !== timestamp.toDateString()) {
                        addDateSeparator(timestamp.toDateString());
                        lastMessageDate = timestamp.toDateString();
                    }

                    const messageElement = document.createElement('div');
                    messageElement.classList.add('message', 'outgoing');
                    messageElement.innerHTML = `<strong>You:</strong> ${messageContent} <br><small>${formatTime(timestamp)}</small>`;
                    document.getElementById('messages').appendChild(messageElement);
                    document.getElementById('messageInput').value = '';

                    const messagesDiv = document.getElementById('messages');
                    messagesDiv.scrollTop = messagesDiv.scrollHeight;
                }
            }

            // Attach the sendMessage function to the send button
            document.getElementById('sendButton').onclick = sendMessage;

            // Listen for incoming chat messages from the server
            socket.on('chat message', (data) => {
                const { user, message, timestamp } = data;
                const messageDate = new Date(timestamp).toDateString();

                if (lastMessageDate !== messageDate) {
                    addDateSeparator(messageDate);
                    lastMessageDate = messageDate;
                }

                const messageElement = document.createElement('div');
                messageElement.classList.add('message', 'incoming');
                messageElement.innerHTML = `<strong>${user.name}:</strong> ${message} <br><small>${formatTime(timestamp)}</small>`;
                document.getElementById('messages').appendChild(messageElement);

                const messagesDiv = document.getElementById('messages');
                messagesDiv.scrollTop = messagesDiv.scrollHeight;
            });
        </script>
    </div>
</body>
</html>
